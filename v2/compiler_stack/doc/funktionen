funktionen:
ablegen als 
j func end
[code]
label func end

Return value ist eigenltlich einfach die letzte lokale variable


Neue befehle:
disc 		0 0		verwirft obersetes stack element
call 		adr n 	springt zu befehl adr und setzt stack pointer um n + 1 werte zurück (das +1 um den old frame pointer zur speichern)
funcentry 	n 0		ähnlich zu blockentry: legt fp am stack, reserviert n plätze am stack, setzt neuen fp und den sp
funcexit	n 		ähnlich zu blockexit, schreibt aber return value zurück und jumped zum return pointer



funktionsaufruf
---------------

1: davor:
*
func(a,b,c)
stack: ...[SP]

2: vor auswertung argumente - push 0 push 0:
*func(a,b,c)
stack ...(_)(_)[SP]

2: vor call funktion
func(*a,b,c)
stack ...(_)(_)(a)(b)(c)[SP]

3: nach call funktion
func(a,b,c) *{...}
stack ...(rp)[SP](_)(a)(b)(c)
rp... return pointer

4: nach funcentry n (n wäre dann 3 + anz lok. + 1 wegen rv)
func(a,b,c) {*...}
stack ...(rp)(ofp)[FP](a)(b)(c)(rv)...SP]
ofp... original frame pointer 


ALLGEMEIN: Jede funktion gibt einen wert zurück, wenn eine funktion nicht mit return aufhört gibt sie 0 zurück
verlassen mit return return
------

1: davor
func(a,b,c) {...*}
stack ...(rp)(ofp)[FP](a)(b)(c)(rv)...[SP]
rv... return value
ziel rv steht in rp

Befehl funcexit n (anz var, anz lokale und rv)
z.B. funcexit 4
stack ...(rv)[SP]

macht 
rp = ([FP]-2)
SP--
([FP-2]) = $rv /* return value */
SP = SP - 4
... (rv)[SP](ofp)[FP]
FP = ofp
jump rp

dadurch geht dann, dass es zum beispiel kein return statement gibt
und der befehl "return" macht nur $rv = xyz


Ausgabe von funktion
function mini($x, $y) {
	return $x + $y;
}

j func_end_mini
funcentry 3 (+ 1 wegen return)
retrieve $x
retrieve $y
add
store $rv
j func_exit_mini
label func_exit_mini
funcexit 3
label func_end_mini


Ausgabe von mini(3,4)
push 0
push 0
push 3
push 4
call mini 2 (2 gibt an wieviel er den sp zurücksetzen muss um auf die neue fp position zu kommen)
