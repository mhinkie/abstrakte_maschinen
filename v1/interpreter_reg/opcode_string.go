// Code generated by "stringer -type=OpCode"; DO NOT EDIT.

package main

import "strconv"

const (
	_OpCode_name_0 = "OpProgEntryOpProgExitOpFuncEntryOpFuncExitOpExitOpReturnOpCall"
	_OpCode_name_1 = "OpStoreOpAallocOpHStoreOpHReadOpLen"
	_OpCode_name_2 = "OpEchoIOpEchoS"
	_OpCode_name_3 = "OpJFalseOpJump"
	_OpCode_name_4 = "OpAddOpSubtOpMultOpDiv"
	_OpCode_name_5 = "OpConcat"
	_OpCode_name_6 = "OpGtOpLtOpEqOpNeq"
	_OpCode_name_7 = "OpStoreUnoptimizedLabel"
)

var (
	_OpCode_index_0 = [...]uint8{0, 11, 21, 32, 42, 48, 56, 62}
	_OpCode_index_1 = [...]uint8{0, 7, 15, 23, 30, 35}
	_OpCode_index_2 = [...]uint8{0, 7, 14}
	_OpCode_index_3 = [...]uint8{0, 8, 14}
	_OpCode_index_4 = [...]uint8{0, 5, 11, 17, 22}
	_OpCode_index_6 = [...]uint8{0, 4, 8, 12, 17}
	_OpCode_index_7 = [...]uint8{0, 18, 23}
)

func (i OpCode) String() string {
	switch {
	case 1 <= i && i <= 7:
		i -= 1
		return _OpCode_name_0[_OpCode_index_0[i]:_OpCode_index_0[i+1]]
	case 20 <= i && i <= 24:
		i -= 20
		return _OpCode_name_1[_OpCode_index_1[i]:_OpCode_index_1[i+1]]
	case 50 <= i && i <= 51:
		i -= 50
		return _OpCode_name_2[_OpCode_index_2[i]:_OpCode_index_2[i+1]]
	case 80 <= i && i <= 81:
		i -= 80
		return _OpCode_name_3[_OpCode_index_3[i]:_OpCode_index_3[i+1]]
	case 100 <= i && i <= 103:
		i -= 100
		return _OpCode_name_4[_OpCode_index_4[i]:_OpCode_index_4[i+1]]
	case i == 110:
		return _OpCode_name_5
	case 120 <= i && i <= 123:
		i -= 120
		return _OpCode_name_6[_OpCode_index_6[i]:_OpCode_index_6[i+1]]
	case 200 <= i && i <= 201:
		i -= 200
		return _OpCode_name_7[_OpCode_index_7[i]:_OpCode_index_7[i+1]]
	default:
		return "OpCode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
