Bytecode:

Neu: Beim laden gibt es jetzt einen decoding step für die befehle.
Die befehle werden dann in zwei speicher geschrieben.
im ersten steht für jeden befehl ein pointer zur ausführenden funktion.
im zweiten stehen für jeden befehl die operanden.

im decodingstep wird die ganze arbeit gemacht wie operatoren lesen und so.

abarbeitung: befehle sind jetzt nach befehlnummer adressiert (nicht nach befehlsadresse in bytes)
werden aus dem commdand-array gelesen und das operanden array wird dann im befehlscode dazugelesen.

Bytecode kann jetzt umfangreicher sein (weil decoding nicht mehr so viel arbeit während der ausführung braucht)
Aufbau:
operanden können folgende arten annehmen: 00 register number, 01 int literal (int immediate), 10 string literal (string immediate)
wenn operand nicht benötigt, wird er auf 00 gesetzt

globals werden im 1. "register frame" abgelegt

8 byte opcode
danach die operanden

operand:
8 bit type
64 bit wert
x bit string

pro operand wird dann 64bit ausgegeben.
wenn der type == register, ist das die registernumber
wenn der type == int lit, ist das das int literal
wenn der type == string lit, ist das die length des string literals (in byte) und das literal steht dann danach

die 2. 8 bit werden als teil des opcodes angesehen

für stringlit:
storeh r0 "asdfasdf"
0000 0001 0010 0000 0*64 0000 1000 "asdfasdf" 0*64
echos r0


