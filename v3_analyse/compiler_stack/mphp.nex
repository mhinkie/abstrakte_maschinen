/<\?php/			{ debugLex("Program start"); return K_PROG_START }
/\?>/				{ debugLex("Program end"); return K_PROG_END }
/if/				{ debugLex( "A keyword:", yylex.Text()); return K_IF }
/else/				{ debugLex( "A keyword:", yylex.Text()); return K_ELSE }
/function/			{ debugLex( "A keyword:", yylex.Text()); return K_FUNC }
/foreach/			{ debugLex( "A keyword:", yylex.Text()); return K_FOREACH }
/for/				{ debugLex( "A keyword:", yylex.Text()); return K_FOR }
/as/				{ debugLex( "A keyword:", yylex.Text()); return K_AS }
/while/				{ debugLex( "A keyword:", yylex.Text()); return K_WHILE }
/echo/				{ debugLex( "A keyword:", yylex.Text()); return K_ECHO }
/return/			{ debugLex( "A keyword:", yylex.Text()); return K_RETURN }
/array/				{ debugLex( "array"); return K_ARRAY }
/[0-9]+/         	{ debugLex("An integer:", yylex.Text()); return INT }
/\"[^\"]*\"/		{ debugLex("string literal:", yylex.Text()); return STRING }
/\$[a-z][a-zA-Z0-9]*/ 	{ debugLex("An var-identifier:", yylex.Text()); return IDVAR }
/[a-z][a-zA-Z0-9]*/  	{ debugLex("An identifier:", yylex.Text()); return IDFUNC }
/>/					{ debugLex("> found"); return C_GT }
/</					{ debugLex("< found"); return C_LT }
/==/				{ debugLex("== found"); return C_EQ }
/!=/				{ debugLex("!= found"); return C_NEQ }
/\+\+/				{ debugLex("++ found"); return C_INC }
/--/				{ debugLex("-- found"); return C_DEC }
/=/					{ debugLex("= found"); return C_ASSIGN }
/\./				{ debugLex(". found"); return C_CONCAT }
/\+/					{ debugLex("+ found"); return C_PLUS }
/-/					{ debugLex("- found"); return C_MINUS }
/\*/				{ debugLex("* found"); return C_AST }
/\(/					{ debugLex("( found"); return C_PARA_L }
/\)/					{ debugLex(") found"); return C_PARA_R }
/\[/					{ debugLex("[ found"); return C_BRAK_L }
/\]/					{ debugLex("] found"); return C_BRAK_R }
/{/					{ debugLex("{ found"); return C_CURL_L }	// zumachen } 
/}/					{ debugLex("curly zu found"); return C_CURL_R }
/\//					{ debugLex("/ found"); return C_DIV }
/;/					{ debugLex("; found"); return C_SEMIK }
/,/					{ debugLex(", found"); return C_COMMA }
/\/\*[^\*]*\*\//		{ debugLex("comment found") }
/[ \t\n]+/        	{ /* eat up whitespace */ }
//

/* workaround fÃ¼rs {-zumachen: https://github.com/blynn/nex/issues/48 */

package main
import "os"
import "fmt"

func main() {
	yyErrorVerbose = true
  	yyParse(NewLexer(os.Stdin))
  	
	debugOutput("starting block processing")
	debugSymbols("full program trees:")
	printTree(programBlock)

	err := programBlock.Process(nil)
	if err != nil {
		fmt.Fprintf(os.Stderr, err.Error() + "\n")
		os.Exit(1)
	}
	printTreeProcessSummary(programBlock)
	printProgram()
	printLabels()
	printFunctions()
	printLiterals()
  outputProgram()
  debugOutput("Nach program output:")
  printProgram()
}
